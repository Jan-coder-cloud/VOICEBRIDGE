import React, { useEffect, useState } from 'react'
import TileBoard from '../components/TileBoard.jsx'
import SentenceBar from '../components/SentenceBar.jsx'
import SosModal from '../components/SosModal.jsx'
import VoiceSettings from '../components/VoiceSettings.jsx'

export default function Home() {
  const [sentence, setSentence] = useState('')
  const [showSOS, setShowSOS] = useState(false)
  const [voices, setVoices] = useState([])
  const [voiceId, setVoiceId] = useState('')
  const [rate, setRate] = useState(1)
  const [pitch, setPitch] = useState(1)
  const [language, setLanguage] = useState('en')
  const [chatVisible, setChatVisible] = useState(false)

  const translations = {
    en: {
      heroText:
        'AI-assisted communication for non-verbal users. Build sentences with tiles and speak them out instantly.',
      categories: [
        { name: 'Basics', tiles: ['Hello', 'Please', 'Thank you', 'Yes', 'No', 'Sorry', 'Good', 'Bad', 'Okay'] },
        { name: 'Needs', tiles: ['Water', 'Food', 'Toilet', 'Medicine', 'Pain', 'Hungry', 'Thirsty', 'Tired', 'Sleep', 'Help'] },
        { name: 'Actions', tiles: ['Open', 'Close', 'Give', 'Take', 'Come', 'Go', 'Sit', 'Stand', 'Stop', 'Start'] },
        { name: 'People / Relations', tiles: ['Mother', 'Father', 'Brother', 'Sister', 'Friend', 'Doctor', 'Teacher'] },
        { name: 'Common Objects', tiles: ['Phone', 'Book', 'Bag', 'Door', 'Light', 'Fan', 'Chair', 'Bed'] },
        { name: 'Emergency / Quick Phrases', tiles: ['Danger', 'Fire', 'Call', 'Ambulance', 'Police'] },
        { name: 'Feelings', tiles: ['Anxious', 'Happy', 'Sad', 'Confused'] },
        { name: 'Places', tiles: ['Home', 'RestRoom', 'Clinic', 'Class', 'Canteen', 'Library'] },
      ],
    },
    ta: {
      heroText:
        '‡Æ™‡Øá‡Æö ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡Ææ‡Æ§ ‡Æ™‡ÆØ‡Æ©‡Æ∞‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æ© AI ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡ØÅ‡Æü‡Æ©‡Øç ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ. ‡Æö‡Øä‡Æ±‡Øç‡Æï‡Æ≥‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æø‡ÆØ‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æø ‡Æâ‡Æü‡Æ©‡Æü‡Æø‡ÆØ‡Ææ‡Æï ‡Æ™‡Øá‡Æö‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.',
      categories: [
        { name: '‡ÆÖ‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øà', tiles: ['‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç', '‡Æ§‡ÆØ‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ', '‡Æ®‡Æ©‡Øç‡Æ±‡Æø', '‡ÆÜ‡ÆÆ‡Øç', '‡Æá‡Æ≤‡Øç‡Æ≤‡Øà', '‡ÆÆ‡Æ©‡Øç‡Æ©‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç', '‡Æ®‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ', '‡ÆÆ‡Øã‡Æö‡ÆÆ‡Øç', '‡Æö‡Æ∞‡Æø'] },
        { name: '‡Æ§‡Øá‡Æµ‡Øà‡Æï‡Æ≥‡Øç', tiles: ['‡Æ§‡Æ£‡Øç‡Æ£‡ØÄ‡Æ∞‡Øç', '‡Æâ‡Æ£‡Æµ‡ØÅ', '‡Æï‡Æ¥‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡ÆÆ‡Øç', '‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ', '‡Æµ‡Æ≤‡Æø', '‡Æ™‡Æö‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ±‡Æ§‡ØÅ', '‡Æ§‡Ææ‡Æï‡ÆÆ‡Øç', '‡ÆÆ‡Æ≤‡Æø‡Æµ‡ØÅ', '‡Æâ‡Æ±‡Æï‡Øç‡Æï‡ÆÆ‡Øç', '‡Æâ‡Æ§‡Æµ‡Æø'] },
        { name: '‡Æö‡ØÜ‡ÆØ‡Æ≤‡Øç‡Æï‡Æ≥‡Øç', tiles: ['‡Æ§‡Æø‡Æ±‡Æï‡Øç‡Æï', '‡ÆÆ‡ØÇ‡Æü‡ØÅ', '‡Æï‡Øä‡Æü‡ØÅ', '‡Æé‡Æü‡ØÅ', '‡Æµ‡Ææ', '‡Æ™‡Øã', '‡Æâ‡Æ±‡Øç‡Æï‡Øä‡Æ≥‡Øç', '‡Æ®‡Æø‡Æ©‡Øç‡Æ±‡ØÅ', '‡Æ®‡Æø‡Æ±‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ', '‡Æ§‡Øä‡Æü‡Æô‡Øç‡Æï‡ØÅ'] },
        { name: '‡ÆÆ‡Æï‡Øç‡Æï‡Æ≥‡Øç / ‡Æâ‡Æ±‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç', tiles: ['‡ÆÖ‡ÆÆ‡Øç‡ÆÆ‡Ææ', '‡ÆÖ‡Æ™‡Øç‡Æ™‡Ææ', '‡Æö‡Æï‡Øã‡Æ§‡Æ∞‡Øç', '‡Æö‡Æï‡Øã‡Æ§‡Æ∞‡Æø', '‡Æ®‡Æ£‡Øç‡Æ™‡Æ∞‡Øç', '‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øç', '‡ÆÜ‡Æö‡Æø‡Æ∞‡Æø‡ÆØ‡Æ∞‡Øç'] },
        { name: '‡Æ™‡Øä‡Æ§‡ØÅ‡Æµ‡Ææ‡Æ© ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æü‡Øç‡Æï‡Æ≥‡Øç', tiles: ['‡Æ§‡Øä‡Æ≤‡Øà‡Æ™‡Øá‡Æö‡Æø', '‡Æ™‡ØÅ‡Æ§‡Øç‡Æ§‡Æï‡ÆÆ‡Øç', '‡Æ™‡Øà', '‡Æ§‡Æø‡Æ±‡Æ™‡Øç‡Æ™‡ØÅ', '‡Æí‡Æ≥‡Æø', '‡Æï‡Ææ‡Æ±‡Øç‡Æ±‡Ææ‡Æü‡Æø', '‡Æï‡Ææ‡Æö‡Æø', '‡Æ™‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Øà'] },
        { name: '‡ÆÖ‡Æµ‡Æö‡Æ∞ / ‡Æµ‡Æø‡Æ∞‡Øà‡Æµ‡ØÅ ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æø‡ÆØ‡Æô‡Øç‡Æï‡Æ≥‡Øç', tiles: ['‡ÆÜ‡Æ™‡Æ§‡Øç‡Æ§‡ØÅ', '‡Æ§‡ØÄ', '‡ÆÖ‡Æ¥‡Øà‡Æ™‡Øç‡Æ™‡ØÅ', '‡ÆÜ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æ≤‡Æ©‡Øç‡Æ∏‡Øç', '‡Æ™‡Øã‡Æ≤‡ØÄ‡Æö‡Ææ‡Æ∞‡Øç'] },
        { name: '‡Æâ‡Æ£‡Æ∞‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç', tiles: ['‡Æï‡Æµ‡Æ≤‡Øà', '‡ÆÆ‡Æï‡Æø‡Æ¥‡Øç‡Æö‡Øç‡Æö‡Æø', '‡Æö‡Øã‡Æï‡ÆÆ‡Øç', '‡Æï‡ØÅ‡Æ¥‡Æ™‡Øç‡Æ™‡ÆÆ‡Øç'] },
        { name: '‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç', tiles: ['‡Æµ‡ØÄ‡Æü‡ØÅ', '‡Æï‡Æ¥‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡ÆÆ‡Øç', '‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡ÆÆ‡Æ©‡Øà', '‡Æµ‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ', '‡Æï‡Æ©‡Øç‡Æü‡ØÄ‡Æ©‡Øç', '‡Æ®‡ØÇ‡Æ≤‡Æï‡ÆÆ‡Øç'] },
      ],
    },
  }

  // Load voices
  useEffect(() => {
    function loadVoices() {
      const v = window.speechSynthesis.getVoices()
      setVoices(v)
      if (v.length && !voiceId) {
        let preferred
        if (language === 'ta') {
          preferred = v.find(x => x.lang.toLowerCase().startsWith('ta'))
        } else {
          preferred = v.find(x => /(en-GB|en-US)/i.test(x.lang))
        }
        setVoiceId(preferred?.name || v[0]?.name || '')
      }
    }
    loadVoices()
    window.speechSynthesis.onvoiceschanged = loadVoices
  }, [language, voiceId])

  const handleTileClick = word => {
    setSentence(prev => (prev ? prev + ' ' : '') + word)
  }
  const handleClear = () => setSentence('')
  const handleSpeak = () => {
    if (!sentence.trim()) return
    const utter = new SpeechSynthesisUtterance(sentence.trim())
    let v
    if (language === 'ta') {
      v = voices.find(x => x.lang.toLowerCase().startsWith('ta'))
    } else {
      v = voices.find(x => x.name === voiceId)
    }
    if (v) utter.voice = v
    utter.rate = rate
    utter.pitch = pitch
    window.speechSynthesis.cancel()
    window.speechSynthesis.speak(utter)
  }

  const toggleChat = () => setChatVisible(!chatVisible)

  return (
    <div className="container">
      <section className="hero">
        <div className="hero-text">
          <h1>VoiceBridge</h1>
          <p>{translations[language].heroText}</p>

          {/* Language Selector */}
          <label style={{ marginTop: '1rem', display: 'block' }}>
            Language:{' '}
            <select value={language} onChange={e => setLanguage(e.target.value)}>
              <option value="en">English</option>
              <option value="ta">‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç</option>
            </select>
          </label>
        </div>
      </section>

      <SentenceBar
        sentence={sentence}
        onSpeak={handleSpeak}
        onClear={handleClear}
      />

      <div className="board-and-settings" style={{ display: 'flex', gap: '20px', alignItems: 'flex-start' }}>
        <TileBoard
          onTileClick={handleTileClick}
          onSOS={() => setShowSOS(true)}
          categories={translations[language].categories}
        />

        <div style={{ position: 'relative' }}>
          <VoiceSettings
            voices={voices}
            voiceId={voiceId}
            setVoiceId={setVoiceId}
            rate={rate}
            setRate={setRate}
            pitch={pitch}
            setPitch={setPitch}
          />
          <button
            onClick={toggleChat}
            style={{
              position: 'fixed',
              bottom: '80px',     // push it up from the bottom
              right: '30px',      // move to bottom-right corner
              width: '60px',
              height: '60px',
              borderRadius: '50%',
              backgroundColor: '#2563eb',
              border: 'none',
              cursor: 'pointer',
              color: 'white',
              fontSize: '28px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              boxShadow: '0 4px 12px rgba(0,0,0,0.3)', // nice shadow
              zIndex: 1001
            }}
            title="Open Chat"
          >
            üí¨
          </button>

        </div>
      </div>

      {showSOS && <SosModal onClose={() => setShowSOS(false)} />}

      {chatVisible && (
        <iframe
          src="https://cdn.botpress.cloud/webchat/v3.2/shareable.html?configUrl=https://files.bpcontent.cloud/2025/09/22/17/20250922172603-MHNBCZH9.json"
          style={{
            position: "fixed",
            bottom: "100px",
            right: "20px",
            width: "350px",
            height: "500px",
            border: "1px solid #ccc",
            borderRadius: "8px",
            boxShadow: "0 4px 12px rgba(0,0,0,0.2)",
            zIndex: 1000,
          }}
          title="VoiceBridge Chat"
        />
      )}
    </div>
  )
}
